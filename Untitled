---Student Name 1  Student Number 1
---Student Name 2  Student Number 2
---Student Name 3  Student Number 3
--for some reason, SQLite often has foreign key constraints off by
--default, so we're goign to turn them back on
PRAGMA foreign_keys = ON;
--drop all the tables, so we get a fresh database each
--time we run this code (careful, this will delete
--your data)

--USEFUL COMMANDS
--SELECT: Select * from table_name where column_name = value
--this is comment

DROP TABLE IF EXISTS Author;
DROP TABLE IF EXISTS Book;
DROP TABLE IF EXISTS Wrote;
DROP TABLE IF EXISTS Reader;
DROP TABLE IF EXISTS Rating;
CREATE TABLE Author(
   id INTEGER,
   given_name TEXT,
   family_name TEXT,
   nationality TEXT,
   date_of_birth DATEadas
);
CREATE TABLE Book(
   id INTEGER,
   title TEXT,
   subtitle TEXT,
   date_of_publication DATE,
   publisher TEXT,
   num_pages INTEGER
);
CREATE TABLE Reader(
   user_name TEXT,
   e_mail TEXT,
   reading_goal INTEGER
);
CREATE TABLE Rating(
   user_name TEXT,
   book_id INTEGER,
   score INTEGER
);
CREATE TABLE Wrote(
   book_id INTEGER,
   author_id INTEGER
);
---insert your data here
---add your queries here
SELECT "Query a: The titles of all books that have more than 500 
pages";
SELECT title FROM Book WHERE num_pages>500; 

SELECT "Query b: The full name of all authors of the book ";
--Your answer here

SELECT "Query c: Titles of all books that have at least one 
review with a score of 10 (duplicates allowed)";
--Your answer here

SELECT "Query d: Titles of all books that have at least one 
review with a score of 10 (without duplicates)";
--Your answer here

SELECT "Query e: The e-mails of all users who rated books by ";
--Your answer here

SELECT "Query f: The e-mails of all users who rated books by 
other than her book ";
--Your answer here
--sfoudiuoewfjabdkhjvoi
SELECT "Query g: The titles of all books published by authors 
older than ";
--Your answer here

SELECT "Query h: The user names of all users who rated higher 
than ";
--Your answer here

SELECT "Query i: The user names of all users whose number of sad
reviews is greater than their reading goal";
--Your answer here

SELECT "Query j: The user names of anyone who has given 2 
different ratings to the same book, and the title
of the book(s) in question";
--Your answer here

SELECT "Query k: The e-mails of all users along with the title of
their highest rated book";


--Your answer here